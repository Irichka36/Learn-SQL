IBM is analyzing how their employees are utilizing the Db2 database by tracking the SQL queries executed by their employees. 
The objective is to generate data to populate a histogram that shows the number of unique queries run by employees during the third quarter of 2023 (July to September). 
Additionally, it should count the number of employees who did not run any queries during this period.
Display the number of unique queries as histogram categories, along with the count of employees who executed that number of unique queries.

queries Schema:
Column Name	      Type	    Description
employee_id	      integer	  The ID of the employee who executed the query.
query_id	        integer	  The unique identifier for each query (Primary Key).
query_starttime	  datetime	The timestamp when the query started.
execution_time	  integer	  The duration of the query execution in seconds.

employees Schema:
Assume that the table below displays all employees in the table:
Column Name	    Type	    Description
employee_id	    integer	  The ID of the employee who executed the query.
full_name	      string	  The full name of the employee.
gender	        string	  The gender of the employee.

WITH query_count AS (
  SELECT 
    e.employee_id,
    COALESCE(COUNT(DISTINCT q.query_id),0) as unique_queries
    -- Подсчитывает количество уникальных запросов (query_id) для каждого сотрудника. 
    --Функция COALESCE гарантирует, что если сотрудник не имеет запросов за указанный период, то будет возвращено значение 0.
  FROM employees e
  LEFT JOIN queries q -- все сотрудники будут включены в результаты, даже если у них нет запросов в таблице queries
  ON e.employee_id = q.employee_id
    AND EXTRACT(MONTH FROM q.query_starttime) >= 7 
    AND EXTRACT(MONTH FROM q.query_starttime) < 10
    --объединяем сотрудников с их запросами только по тем записям, которые соответствуют условиям времени (с июля по сентябрь).
    -- блок WHERE не используем, так как он игнорирует значение NULL
  GROUP BY e.employee_id
  --Группируем данные по каждому сотруднику, чтобы подсчитать количество уникальных запросов для каждого.
)
SELECT 
  unique_queries,
  COUNT(employee_id) as employee_count
FROM query_count
GROUP BY unique_queries
ORDER BY unique_queries;
