QUESTION 1

  /* Show all of the patients grouped into weight groups. Show the total amount of patients in each weight group.
  Order the list by the weight group decending.
  For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc. */

SELECT
	COUNT (*) AS patients_in_group
  , FLOOR(weight / 10) * 10 AS weight_group
FROM patients
GROUP BY 2
ORDER BY weight_group DESC;

ANOTHER SOLUTION 

SELECT
  COUNT (patient_id),
  weight - weight % 10 AS weight_group 

-- weight % 10 вычисляет остаток от деления значения weight на 10.
weight - weight % 10 вычитает этот остаток из значения weight, тем самым округляя его до ближайшего меньшего целого, кратного 10. --

FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC;


____________________________________________________________________________________________________________________________



QUESTION 2

  /* Show patient_id, weight, height, isObese from the patients table.
  Display isObese as a boolean 0 or 1.
  Obese is defined as weight(kg)/(height(m)2) >= 30.
  weight is in units kg. height is in units cm. */

SELECT
	patient_id
  , weight
  , height
  , CASE WHEN weight/POWER(height/100.0,2) >= 30 THEN 1 ELSE 0 END AS isObese
FROM patients;


____________________________________________________________________________________________________________________________


QUESTION 3

  /* Show patient_id, first_name, last_name, and attending doctor's specialty.
Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'
Check patients, admissions, and doctors tables for required information. */

SELECT
	p.patient_id
  , p.first_name
  , p.last_name
  , d.specialty
FROM patients p 
JOIN admissions a ON p.patient_id = a.patient_id
JOIN doctors d ON a.attending_doctor_id = d.doctor_id
WHERE a.diagnosis = 'Epilepsy'
	AND d.first_name = 'Lisa';


____________________________________________________________________________________________________________________________


QUESTION 4

  /* All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.
  The password must be the following, in order:
  1. patient_id
  2. the numerical length of patient's last_name
  3. year of patient's birth_date */

SELECT 
	DISTINCT a.patient_id
	, CONCAT (a.patient_id,LEN(p.last_name),YEAR(p.birth_date)) AS Password
FROM patients p 
JOIN admissions a ON a.patient_id = p.patient_id;


____________________________________________________________________________________________________________________________


QUESTION 5

  /* Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.
Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group. */

SELECT 
	CASE WHEN patient_id % 2 = 0 THEN 'Yes' ELSE 'No' END AS has_insurance
  , SUM(CASE WHEN patient_id % 2 = 0 THEN 10 ELSE 50 END) AS cost_after_insurance
FROM admissions
GROUP BY has_insurance;

ANOTHER SOLUTION

SELECT 
  'No' AS has_insurance
  , COUNT (*) * 50 AS cost
FROM admissions 
WHERE patient_id % 2 = 1 
GROUP BY has_insurance
UNION
SELECT 
  'Yes' AS has_insurance
  , COUNT(*) * 10 AS cost
FROM admissions 
WHERE patient_id % 2 = 0 
GROUP BY has_insurance;

____________________________________________________________________________________________________________________________


QUESTION 6
 
/* Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name */

SELECT pr.province_name
FROM province_names pr
JOIN patients p ON p.province_id = pr.province_id
GROUP BY province_name
HAVING COUNT (CASE WHEN p.gender = 'M' THEN 1 END) > COUNT (CASE WHEN p.gender = 'F' THEN 1 END);

ANOTHER SOLUTION 

SELECT pr.province_name
FROM patients AS pa
JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  SUM(gender = 'M') > SUM(gender = 'F');


____________________________________________________________________________________________________________________________


QUESTION 7
  /* We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
- First_name contains an 'r' after the first two letters.
- Identifies their gender as 'F'
- Born in February, May, or December
- Their weight would be between 60kg and 80kg
- Their patient_id is an odd number
- They are from the city 'Kingston' */

SELECT *
FROM patients
WHERE 
	first_name LIKE '__r%'
	AND gender = 'F'
  AND MONTH(birth_date) IN (02,05,12)
  AND weight between 60 AND 80
  AND patient_id % 2!= 0
  AND city = 'Kingston'; 


____________________________________________________________________________________________________________________________


QUESTION 8

/* Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form. */
SELECT CONCAT (ROUND (
  	(COUNT (CASE WHEN gender = 'M' THEN 1 END) * 100.0) / COUNT (*),2
  ),'%')  AS percent
FROM patients;

ANOTHER SOLUTION 

SELECT
  ROUND (100 * AVG(gender = 'M'), 2) || '%' AS percent_of_male_patients
FROM patients;

ANOTHER SOLUTION 

SELECT 
   CONCAT(ROUND(SUM(gender='M') / CAST(COUNT(*) AS float), 4) * 100, '%')
FROM patients;

____________________________________________________________________________________________________________________________


QUESTION 9
	/* For each day display the total amount of admissions on that day. Display the amount changed from the previous date. */
SELECT
	admission_date
    	, COUNT (*) AS admission_day
	, COUNT (*) - LAG(COUNT (*)) OVER (ORDER BY admission_date) AS admission_count_change
FROM admissions
GROUP BY admission_date
ORDER BY admission_date;


ANOTHER SOLUTION 

WITH admission_counts_table AS 
(
  SELECT 
	admission_date
	, COUNT(patient_id) AS admission_count
  FROM admissions
  GROUP BY admission_date
  ORDER BY admission_date DESC
)
SELECT
  admission_date 
  , admission_count
  , admission_count - LAG(admission_count) OVER(ORDER BY admission_date) AS admission_count_change 
FROM admission_counts_table;


____________________________________________________________________________________________________________________________


QUESTION 10
	/* Sort the province names in ascending order in such a way that the province 'Ontario' is always on top. */

SELECT
	province_name
FROM province_names
ORDER BY 
CASE 
   		WHEN province_name = 'Ontario' THEN 0
        ELSE 1
    END
    , province_name ASC;

ANOTHER SOLUTION

SELECT province_name
FROM province_names
ORDER BY  (NOT province_name = 'Ontario')
	 , province_name;


____________________________________________________________________________________________________________________________


QUESTION 11

	/* We need a breakdown for the total amount of admissions each doctor has started each year. 
	Show the doctor_id, doctor_full_name, specialty, year, total_admissions for that year. */

SELECT
	d.doctor_id
    	, CONCAT (d.first_name,' ', d.last_name) AS doctor_full_name
    	, d.specialty
    	, YEAR (a.admission_date)
    	, COUNT (a.patient_id)
FROM doctors d
JOIN admissions a ON a.attending_doctor_id = d.doctor_id
GROUP BY YEAR (a.admission_date)
	, d.doctor_id;
